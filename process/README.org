* <2017-09-28 Thu>
thinking about games and/as archives

building a game around an archive's api
instagram, twitter, sound recordings, youtube

bots build an archive
design an interface around the material

* <2017-10-31 Tue>
Finally talked to a friend about the shared code I was using (mostly for the context system that I used).
I'll start implementing a basic version of the textile and see how far I can get without needing context, then I'll can start pulling stuff in.


* <2017-10-30 Mon>
-- Some notes from my experiments with jupyter notebooks.

I was getting some python-version errors. [[https://github.com/millejoh/emacs-ipython-notebook/issues/176#issuecomment-305747009][These steps]] worked.
So now I can start Jupyter's repl-like console.

If I want to automate the startup later, it might be easier to script outside of Emacs (my emacs start-up time is long enough already).
I want to explore the org-mode integrations some more.

What does Jupyter do well? How can I integrate it into the documentation/presentation process? I'll ask T- on Weds.

Also, I found this [[https://blog.jupyter.org/the-continued-existence-of-the-emacs-ipython-notebook-54bd1c371d57][blog post]] on the jupyter blog by the Emacs jupyter maintainer. A short study on how development communities handle overlapping projects and naming conventions.

* <2017-11-02 Thu>
thinking about selection (not wanting to be fascist or neoliberal)
mulptiple cursors, multiboxing mice
(treating them as learning agents? representations of mice?)

functions without representations (??)



* <2017-11-15 Wed>
- thinking about textural media / alchemical media

the time cost of development
storyboarding, design
game remixing -> lightweight, could it be done quickly?

* <2017-12-04 Mon>
a game where you write to ais

-- how plausible is it to add networking in one week?

* <2017-12-24 Sun>
Here are some reflections on the project so far.
The goal for this project was to develop a framework for using text in games. I've found it difficult to maintain my focus on the project. Part of that difficulty comes from not having a delineated scope. My thinking has been scattered, and while a lot of that thinking is related to this project (it involves using text systems I'm developing), it feels like a lot of my ideas aren't directly related to this specific project. Would it make sense to try to try the method on my whole research creation practice as a whole, rather than just a project?
Moreover, the game designs I was getting excited about were much more sophisticated than what I've been able to implement yet. That doesn't have to limit my development though. In fact, this project was about developing a framework for further exploration - so those designs could have pushed me to develop the framework further. That didn't happen, though - and not being able to implement those designs affected my motivation.
Here are some thoughts on how I might approach this problem moving forward:
- create smaller prototypes to keep the ideation-programming loop tighter
- have a strong aesthetic constraint for a project (for example, Pippin's Sibilant Snakelikes)
- set more daily/weekly goals for the project

As I continue to use the method, I'd like try new methods of playing with version control.
The visualizations of commit histories in Sourcetree and git's log function are great, but I haven't found a way of engaging them while working on a project.
Some ideas about how I might:
- smooth out the workflow for reverting to a commit and running a project (perhaps with the emacs git integration)
- make my own tool for visualizing commit histories and reverting them? I could talk to Tony about his use of the tags
